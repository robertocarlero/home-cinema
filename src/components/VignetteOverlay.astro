---
export interface Props {
	imageUrl?: string;
	width?: string;
	height?: string;
	vignetteIntensity?: number;
	spotSize?: string;
	className?: string;
	showInstructions?: boolean;
}

const {
	imageUrl = '',
	width = '800px',
	height = '600px',
	className = '',
} = Astro.props;

const id = Math.random().toString(36).substring(2, 15);
---

<div class={`vignette-container ${className}`} id={id}>
	<div class="background-image"></div>
	<div class="vignette-overlay" id={`vignette-${id}`}>
		<slot />
	</div>
</div>

<style
	define:vars={{
		bgImage: `url("${imageUrl}")`,
		width,
		height,
		vignetteIntensity: 2,
		spotX: '0px',
		spotY: '0px',
	}}
>
	.vignette-container {
		position: relative;
		width: var(--width);
		height: var(--height);
		overflow: hidden;
	}

	.background-image {
		width: 100%;
		height: 100%;
		background-image: var(--bgImage);
		background-size: cover;
		background-position: center;
		position: absolute;
		top: 0;
		left: 0;
	}

	.vignette-overlay {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		cursor: crosshair;
		background: radial-gradient(
			ellipse at center,
			rgba(0, 0, 0, 0) 0%,
			rgba(0, 0, 0, calc(var(--vignetteIntensity) * 0.3)) 50%,
			rgba(0, 0, 0, calc(var(--vignetteIntensity) * 0.7)) 70%,
			rgba(0, 0, 0, var(--vignetteIntensity)) 100%
		);
		mask: radial-gradient(
			ellipse var(--spotX) var(--spotY) at var(--mouse-x, 50%)
				var(--mouse-y, 50%),
			rgba(0, 0, 0, 0) 0%,
			rgba(0, 0, 0, 0) 58%,
			rgba(0, 0, 0, 0.2) 72%,
			rgba(0, 0, 0, 0.5) 85%,
			rgba(0, 0, 0, 1) 100%
		);
	}
</style>

<script define:vars={{ id }} is:inline>
	function initVignetteEffect() {
		const vignette = document.getElementById(`vignette-${id}`);
		const container = document.querySelector(`.vignette-container#${id}`);
		const exclude = container?.querySelectorAll('.exclude-overlay');

		if (!vignette || !container) return;

		container.addEventListener('mousemove', (e) => {
			const rect = container.getBoundingClientRect();
			const me = e;
			const x = me.clientX - rect.left;
			const y = me.clientY - rect.top;

			const xPercent = (x / rect.width) * 100;
			const yPercent = (y / rect.height) * 100;

			vignette.style.setProperty('--mouse-x', xPercent + '%');
			vignette.style.setProperty('--mouse-y', yPercent + '%');

			vignette.style.setProperty('--spotX', '150px');
			vignette.style.setProperty('--spotY', '150px');
		});

		exclude?.forEach((item) => {
			item?.addEventListener('mouseenter', (event) => {
				vignette.style.setProperty('--spotX', '0px');
				vignette.style.setProperty('--spotY', '0px');
			});
			item?.addEventListener('mouseleave', () => {
				vignette.style.setProperty('--spotX', '150px');
				vignette.style.setProperty('--spotY', '150px');
			});
			item?.addEventListener('mousemove', (e) => {
				e.stopPropagation();
			});
		});

		container.addEventListener('mouseleave', () => {
			vignette.style.setProperty('--mouse-x', '50%');
			vignette.style.setProperty('--mouse-y', '50%');

			vignette.style.setProperty('--spotX', '0px');
			vignette.style.setProperty('--spotY', '0px');
		});

		container.addEventListener('mouseenter', () => {
			vignette.style.setProperty('--spotX', '150px');
			vignette.style.setProperty('--spotY', '150px');
		});
	}

	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initVignetteEffect);
	} else {
		initVignetteEffect();
	}

	document.addEventListener('astro:page-load', initVignetteEffect);
</script>
